buildscript {
	ext {
		springBootVersion = '2.0.0.M6'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }	
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("se.transmode.gradle:gradle-docker:1.2")
		classpath("gradle.plugin.org.unbroken-dome.gradle-plugins:gradle-xjc-plugin:1.1.3")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'
//apply plugin: 'org.unbroken-dome.xjc'

group = 'ch.so.agi.oereb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa') 
	//compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.bedatadriven:jackson-datatype-jts:2.4')	
	compile('org.postgresql:postgresql:42.1.4')
	compile('org.hibernate:hibernate-spatial:5.2.12.Final')
	runtime('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')			
}

bootJar {
    launchScript()
}

sourceSets {
	generated {
		java {
			srcDir 'src/generated/java'
		}
		resources {
			srcDir 'src/generated/resources'
		}
	}
	main {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}	
	test {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
}

// xjc Extraxt.xsd -extension -b globalBindinds.xjb -b gml-v_3_2_1.xjb -b iso19139-v_20070417.ignore.xjb -Xinject-code
// Versioning.xsd will be also processed (*.xsd).
// Refresh Gradle project creates a link to generated sources -> error messages
// b/c of duplicated classes.
/*
xjcGenerate {
	source = fileTree('src/main/schema') { include '*.xsd' }
	bindingFiles = fileTree('src/main/schema') { include '*.xjb' }
	extension = true
	outputDirectory = file('/Users/stefan/tmp/build/xjc/generated-sources')
    extraArgs = [
        '-Xinject-code'
    ]	
}
*/

task buildDocker(type: Docker) {
	tag = "sogis/${applicationName}"
	tagVersion = 'latest'
	baseImage = 'frolvlad/alpine-oraclejdk8:slim'
	push = project.hasProperty('push') // <-> "./gradlew buildDocker -Ppush"
	applicationName = jar.baseName
	addFile {
		from jar
		rename {'app.jar'}
	}
  	entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}
