EgridEntity.getEgridByNumberAndIdentdn=\
SELECT \
	egris_egrid AS egrid, \
	CASE \
		WHEN egris_egrid IS NULL THEN 'CH-DUMMY' \
		ELSE egris_egrid \
	END AS egrid, \
	nbident as identdn, \
	nummer as number \
FROM \
	av_avdpool_ng.liegenschaften_grundstueck \
WHERE \
	nummer = :number \
	AND nbident = :identdn \
; 
EgridEntity.getEgridByXY=\
SELECT \
	CASE \
		WHEN g.egris_egrid IS NULL THEN 'CH-DUMMY' \
		ELSE g.egris_egrid \
	END AS egrid, \
	g.nbident AS identdn, \
	g.nummer AS number \
FROM \
	( \
		SELECT \
			geometrie AS geometrie, \
			liegenschaft_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_liegenschaft \
		UNION ALL \
		SELECT \
			geometrie AS geometrie, \
			selbstrecht_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_selbstrecht \
	) AS parcels \
	LEFT JOIN av_avdpool_ng.liegenschaften_grundstueck AS g \
	ON g.t_id = parcels.grundstueck_fk \
WHERE \
	ST_Intersects(:point, geometrie) \
;
EgridEntity.getEgridByGNSS=\
SELECT \
	CASE \
		WHEN g.egris_egrid IS NULL THEN 'CH-DUMMY' \
		ELSE g.egris_egrid \
	END AS egrid, \
	g.nbident AS identdn, \
	g.nummer AS number \
FROM \
	( \
		SELECT \
			geometrie AS geometrie, \
			liegenschaft_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_liegenschaft \
		UNION ALL \
		SELECT \
			geometrie AS geometrie, \
			selbstrecht_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_selbstrecht \
	) AS parcels \
	LEFT JOIN av_avdpool_ng.liegenschaften_grundstueck AS g \
	ON g.t_id = parcels.grundstueck_fk \
WHERE \
	ST_Intersects(ST_Transform(:point, 2056), geometrie) \
;
EgridEntity.getEgridByPostalcodeAndLocalisationAndHousingNumber=\
SELECT DISTINCT \
	CASE \
		WHEN g.egris_egrid IS NULL THEN 'CH-DUMMY' \
		ELSE g.egris_egrid \
	END AS egrid, \
	g.nbident AS identdn, \
	g.nummer AS "number" \
FROM \
	( \
		SELECT \
			t_id, \
			gebaeudeeingang_von, \
			hausnummer, \
			lage \
		FROM	 \
			av_avdpool_ng.gebaeudeadressen_gebaeudeeingang \
		WHERE \
			hausnummer IS NOT NULL \
			AND \
			istoffiziellebezeichnung = 'ja' \
	) AS gebein \
	LEFT JOIN av_avdpool_ng.gebaeudeadressen_lokalisation AS lok \
	ON gebein.gebaeudeeingang_von = lok.t_id \
	LEFT JOIN av_avdpool_ng.gebaeudeadressen_lokalisationsname AS lokname \
	ON lokname.benannte = lok.t_id \
	INNER JOIN  \
	( \
		SELECT \
			geometrie AS geometrie, \
			liegenschaft_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_liegenschaft \
		UNION ALL \
		SELECT \
			geometrie AS geometrie, \
			selbstrecht_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_selbstrecht \
	) AS parcels \
	ON ST_Intersects(gebein.lage, parcels.geometrie) \
	LEFT JOIN av_plzortschaft.plzortschaft_plz6 AS plz \
	ON ST_Intersects(gebein.lage, plz.flaeche) \
	LEFT JOIN av_avdpool_ng.liegenschaften_grundstueck AS g \
	ON g.t_id = parcels.grundstueck_fk \
WHERE \
	lokname.atext IS NOT NULL /* Due to errors (?) in the data. */ \
	AND plz.plz = :postalcode \
	AND lokname.atext = :localisation \
	AND gebein.hausnummer = :housing_number \
;
EgridEntity.getEgridByPostalcodeAndLocalisation=\
SELECT DISTINCT \
	CASE \
		WHEN g.egris_egrid IS NULL THEN 'CH-DUMMY' \
		ELSE g.egris_egrid \
	END AS egrid, \
	g.nbident AS identdn, \
	g.nummer AS "number" \
FROM \
	( \
		SELECT \
			t_id, \
			gebaeudeeingang_von, \
			hausnummer, \
			lage \
		FROM	 \
			av_avdpool_ng.gebaeudeadressen_gebaeudeeingang \
		WHERE \
			hausnummer IS NOT NULL \
			AND \
			istoffiziellebezeichnung = 'ja' \
	) AS gebein \
	LEFT JOIN av_avdpool_ng.gebaeudeadressen_lokalisation AS lok \
	ON gebein.gebaeudeeingang_von = lok.t_id \
	LEFT JOIN av_avdpool_ng.gebaeudeadressen_lokalisationsname AS lokname \
	ON lokname.benannte = lok.t_id \
	INNER JOIN  \
	( \
		SELECT \
			geometrie AS geometrie, \
			liegenschaft_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_liegenschaft \
		UNION ALL \
		SELECT \
			geometrie AS geometrie, \
			selbstrecht_von AS grundstueck_fk \
		FROM \
			av_avdpool_ng.liegenschaften_selbstrecht \
	) AS parcels \
	ON ST_Intersects(gebein.lage, parcels.geometrie) \
	LEFT JOIN av_plzortschaft.plzortschaft_plz6 AS plz \
	ON ST_Intersects(gebein.lage, plz.flaeche) \
	LEFT JOIN av_avdpool_ng.liegenschaften_grundstueck AS g \
	ON g.t_id = parcels.grundstueck_fk \
WHERE \
	lokname.atext IS NOT NULL /* Due to errors (?) in the data. */ \
	AND plz.plz = :postalcode \
	AND lokname.atext = :localisation \
;
RealEstateDPREntity.findOneByEgrid=\
SELECT \
	parcel.t_id, \
	g.nummer AS "number", \
	g.nbident AS identdn, \
	CASE \
		WHEN g.egris_egrid IS NULL THEN 'CH-DUMMY' \
		ELSE g.egris_egrid \
	END AS egrid, \
	CASE \
		WHEN g.art = 'Liegenschaft' THEN 'REAL_ESTATE' \
		WHEN g.art = 'SelbstRecht.Baurecht' THEN 'DISTINCT_AND_PERMANENT_RIGHTS_BUILDING_RIGHT' \
		WHEN g.art = 'SelbstRecht.Baurecht' THEN 'DISTINCT_AND_PERMANENT_RIGHTS_RIGHT_TO_SPRING_WATER' \
		WHEN g.art = 'SelbstRecht.Baurecht' THEN 'DISTINCT_AND_PERMANENT_RIGHTS_CONCESSION' \
		ELSE 'DISTINCT_AND_PERMANENT_RIGHTS_OTHER' \
	END AS "type", \
	'SO' AS canton, \
	gemeinde.aname AS municipality, \
	gemeinde.bfsnr AS fosnr, \
	'http://www.example.com/ist_ja_optional_oder' AS metadata_of_geographical_basedata, \
	parcel.flaechenmass AS land_registry_area, \
	parcel.geometrie as geometry \
FROM \
	( \
		SELECT \
			t_id, \
			nummer, \
			nbident, \
			egris_egrid, \
			art \
		FROM \
			av_avdpool_ng.liegenschaften_grundstueck AS g \
		WHERE egris_egrid = :egrid \
	) AS g \
	LEFT JOIN \
	( \
		SELECT \
			t_id, \
			geometrie AS geometrie, \
			flaechenmass, \
			liegenschaft_von AS grundstueck_fk  \
		FROM  \
			av_avdpool_ng.liegenschaften_liegenschaft  \
		UNION ALL  \
		SELECT  \
			t_id, \
			geometrie AS geometrie,  \
			flaechenmass, \
			selbstrecht_von AS grundstueck_fk  \
		FROM  \
			av_avdpool_ng.liegenschaften_selbstrecht \
	) AS parcel \
	ON g.t_id = parcel.grundstueck_fk \
	LEFT JOIN \
	( \
		SELECT \
			gem.bfsnr, \
			gem.aname, \
			gemgre.geometrie \
		FROM \
			av_avdpool_ng.gemeindegrenzen_gemeinde AS gem \
			LEFT JOIN \
			( \
				SELECT \
					gemeindegrenze_von, \
					ST_Multi(ST_Union(geometrie)) AS geometrie \
				FROM \
					av_avdpool_ng.gemeindegrenzen_gemeindegrenze \
				GROUP BY  \
					gemeindegrenze_von \
			) AS gemgre \
			ON gem.t_id = gemgre.gemeindegrenze_von \
	) AS gemeinde \
	ON ST_Intersects(ST_PointOnSurface(parcel.geometrie), gemeinde.geometrie) \
	LIMIT 1 \
;
ThemeEntity.findThemesByGeometry=\
SELECT \
  itfcode AS t_id, \
  CASE \
    WHEN ilicode = 'Nutzungsplanung' THEN 'LandUsePlans' \
    WHEN ilicode = 'ProjektierungszonenNationalstrassen' THEN 'MotorwaysProjectPlaningZones' \
    WHEN ilicode = 'BaulinienNationalstrassen' THEN 'MotorwaysBuildingLines' \
    WHEN ilicode = 'ProjektierungszonenEisenbahnanlagen' THEN 'RailwaysProjectPlanningZones' \
    WHEN ilicode = 'BaulinienEisenbahnanlagen' THEN 'RailwaysBuildingLines' \
    WHEN ilicode = 'ProjektierungszonenFlughafenanlagen' THEN 'AirportsProjectPlanningZones' \
    WHEN ilicode = 'BaulinienFlughafenanlagen' THEN 'AirportsBuildingLines' \
    WHEN ilicode = 'SicherheitszonenplanFlughafen' THEN 'AirportsSecurityZonePlans' \
    WHEN ilicode = 'BelasteteStandorte' THEN 'ContaminatedSites' \
    WHEN ilicode = 'BelasteteStandorteMilitaer' THEN 'ContaminatedMilitarySites' \
    WHEN ilicode = 'BelasteteStandorteZivileFlugplaetze' THEN 'ContaminatedCivilAviationSites' \
    WHEN ilicode = 'BelasteteStandorteOeffentlicherVerkehr' THEN 'ContaminatedPublicTransportSites' \
    WHEN ilicode = 'Grundwasserschutzzonen' THEN 'GroundwaterProtectionZones' \
    WHEN ilicode = 'Grundwasserschutzareale' THEN 'GroundwaterProtectionSites' \
    WHEN ilicode = 'Laermemfindlichkeitsstufen' THEN 'NoiseSensitivityLevels' \
    WHEN ilicode = 'Waldgrenzen' THEN 'ForestPerimeters' \
    WHEN ilicode = 'Waldabstandslinien' THEN 'MotorwaysProjectPlaningZones' \
    WHEN ilicode = 'WeiteresThema' THEN 'WeiteresThema' \
  END AS theme, \
  CASE  \
    WHEN thema IS NULL THEN FALSE \
    ELSE TRUE \
  END AS concerned, \
  thema_txt.titel_de AS title \
FROM \
( \
  SELECT DISTINCT \
    th.itfcode, \
    eb.thema, \
    th.ilicode \
  FROM \
  ( \
    SELECT \
      t_id, \
      eigentumsbeschraenkung, \
      flaeche_lv95, \
      linie_lv95, \
      punkt_lv95 \
    FROM \
      agi_oereb_trsfr.transferstruktur_geometrie \
    WHERE  \
      ST_Intersects(:limit, flaeche_lv95) \
      OR \
      ST_Intersects(:limit, linie_lv95) \
      OR \
      ST_Intersects(:limit, punkt_lv95) \
  ) AS eb_geom \
  LEFT JOIN agi_oereb_trsfr.transferstruktur_eigentumsbeschraenkung AS eb \
  ON eb.t_id = eb_geom.eigentumsbeschraenkung \
  RIGHT JOIN agi_oereb_trsfr.thema AS th \
  ON eb.thema = th.ilicode \
  ORDER BY th.itfcode \
) AS themes \
LEFT JOIN agi_oereb_trsfr.codelistentext_thematxt AS thema_txt \
ON thema_txt.code = ilicode \
;
ThemeEntity.getThemeByIliCode=\
SELECT \
  thema.itfcode AS t_id, \
  CASE  \
    WHEN ilicode = 'Nutzungsplanung' THEN 'LandUsePlans'  \
    WHEN ilicode = 'ProjektierungszonenNationalstrassen' THEN 'MotorwaysProjectPlaningZones' \
    WHEN ilicode = 'BaulinienNationalstrassen' THEN 'MotorwaysBuildingLines' \
    WHEN ilicode = 'ProjektierungszonenEisenbahnanlagen' THEN 'RailwaysProjectPlanningZones' \
    WHEN ilicode = 'BaulinienEisenbahnanlagen' THEN 'RailwaysBuildingLines' \
    WHEN ilicode = 'ProjektierungszonenFlughafenanlagen' THEN 'AirportsProjectPlanningZones' \
    WHEN ilicode = 'BaulinienFlughafenanlagen' THEN 'AirportsBuildingLines' \
    WHEN ilicode = 'SicherheitszonenplanFlughafen' THEN 'AirportsSecurityZonePlans' \
    WHEN ilicode = 'BelasteteStandorte' THEN 'ContaminatedSites' \
    WHEN ilicode = 'BelasteteStandorteMilitaer' THEN 'ContaminatedMilitarySites' \
    WHEN ilicode = 'BelasteteStandorteZivileFlugplaetze' THEN 'ContaminatedCivilAviationSites' \
    WHEN ilicode = 'BelasteteStandorteOeffentlicherVerkehr' THEN 'ContaminatedPublicTransportSites' \
    WHEN ilicode = 'Grundwasserschutzzonen' THEN 'GroundwaterProtectionZones' \
    WHEN ilicode = 'Grundwasserschutzareale' THEN 'GroundwaterProtectionSites' \
    WHEN ilicode = 'Laermemfindlichkeitsstufen' THEN 'NoiseSensitivityLevels' \
    WHEN ilicode = 'Waldgrenzen' THEN 'ForestPerimeters' \
    WHEN ilicode = 'Waldabstandslinien' THEN 'MotorwaysProjectPlaningZones' \
    WHEN ilicode = 'WeiteresThema' THEN 'WeiteresThema' \
  END AS theme, \
  titel_de AS title, \
  true AS concerned \
FROM \
  agi_oereb_trsfr.thema AS thema \
  LEFT JOIN agi_oereb_trsfr.codelistentext_thematxt AS thema_txt \
  ON thema.ilicode = thema_txt.code \
WHERE \
  thema.ilicode = :ilicode \
;
RestrictionOnLandownershipAreaEntity.getRestrictionsByGeometry=\
SELECT \
  t_id, \
  restriction_t_id, \
  information, \
  theme, \
  subtheme, \
  law_status, \
  CASE \
    WHEN ST_Area(geometry) > :land_registry_area THEN :land_registry_area \
    ELSE ST_Area(geometry) \
  END AS area_share, \
  CASE \
    WHEN (ST_Area(geometry) / :land_registry_area) * 100 > 100 THEN 100 \
    ELSE (ST_Area(geometry) / :land_registry_area) * 100 \
  END AS part_in_percent, \
  reference_wms, \
  geometry \
FROM \
( \
SELECT \
  eb_geom.t_id, /* This will not be unique! */ \
  eb.t_id AS restriction_t_id, \
  eb.aussage_de AS information, \
  eb.thema AS theme, \
  eb.subthema AS subtheme, \
  CASE \
    WHEN eb.rechtsstatus = 'inKraft' THEN 'inForce' \
    ELSE 'runningModifications' \
  END AS law_status, \
  ds.verweiswms as reference_wms, \
  (ST_Dump(ST_CollectionExtract(ST_Intersection(eb_geom.geometry, geometry), 3))).geom AS geometry \
FROM \
( \
  SELECT \
    t_id, \
    eigentumsbeschraenkung, \
    flaeche_lv95 AS geometry \
  FROM \
    agi_oereb_trsfr.transferstruktur_geometrie AS trsfr_geom \
  WHERE  \
    ST_Intersects(:limit, flaeche_lv95)  \
) AS eb_geom \
LEFT JOIN agi_oereb_trsfr.transferstruktur_eigentumsbeschraenkung AS eb \
ON eb_geom.eigentumsbeschraenkung = eb.t_id \
LEFT JOIN agi_oereb_trsfr.transferstruktur_darstellungsdienst as ds \
ON eb.darstellungsdienst = ds.t_id \
) as foo \
; 
LegendEntryEntity.getLegendEntryEntityByRestrictionEntityId=\
SELECT \
  le.t_id, \
  le.symbol, \
  le.legendetext_de AS legend_text, \
  le.artcode AS type_code, \
  le.artcodeliste AS type_code_list, \
  le.thema AS theme, \
  le.subthema AS subtheme \
FROM \
  agi_oereb_trsfr.transferstruktur_eigentumsbeschraenkung AS eb  \
  LEFT JOIN agi_oereb_trsfr.transferstruktur_darstellungsdienst AS ds  \
  ON ds.t_id = eb.darstellungsdienst \
  LEFT JOIN agi_oereb_trsfr.transferstruktur_legendeeintrag AS le  \
  ON le.transfrstrkstllngsdnst_legende = ds.t_id \
WHERE  \
  eb.t_id = 18564 \
  AND \
  eb.artcode = le.artcode \
;
  